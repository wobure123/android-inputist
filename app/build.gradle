plugins {
    id 'com.android.application'
}

android {
    namespace 'com.inputassistant.universal'
    compileSdk 34

    // 签名配置
    signingConfigs {
        debug {
            // 使用默认debug签名
        }
        release {
            // 生产环境签名配置
            // 如果有正式签名，在这里配置
            // storeFile file('path/to/your/keystore.jks')
            // storePassword 'your_store_password'
            // keyAlias 'your_key_alias'
            // keyPassword 'your_key_password'
            
            // 临时使用debug签名（开发阶段）
            // 检查debug keystore是否存在，不存在则使用debug配置
            def debugKeystore = file(System.getProperty('user.home') + '/.android/debug.keystore')
            if (debugKeystore.exists()) {
                storeFile debugKeystore
                storePassword 'android'
                keyAlias 'androiddebugkey'
                keyPassword 'android'
            } else {
                // CI环境或debug keystore不存在时，使用debug配置
                storeFile null
                storePassword null
                keyAlias null
                keyPassword null
            }
        }
    }

    defaultConfig {
        applicationId "com.inputassistant.universal"
        minSdk 24
        targetSdk 34
        versionCode 4
        versionName "2.3.0"  // 语义化版本号: 主版本.次版本.修订版本 - 新增智能悬浮球功能

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            debuggable true
            applicationIdSuffix ".debug"    // Debug版本添加后缀
            versionNameSuffix "-debug"      // 版本名添加debug标识
            // 使用统一的debug签名配置
        }
        release {
            debuggable false                // 禁用调试功能
            minifyEnabled false             // 禁用代码混淆（重要改动）
            shrinkResources false           // 禁用资源压缩（必须与minifyEnabled保持一致）
            
            // 签名配置：检查是否有可用的release签名，否则使用debug签名
            def debugKeystore = file(System.getProperty('user.home') + '/.android/debug.keystore')
            if (debugKeystore.exists()) {
                signingConfig signingConfigs.release
            } else {
                signingConfig signingConfigs.debug
            }
            
            // 由于禁用了代码混淆，可以移除proguardFiles配置
            // proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    
    lint {
        checkReleaseBuilds false
        // 或者创建基线文件忽略当前问题
        // baseline = file("lint-baseline.xml")
        
        // 忽略特定的lint规则
        disable 'ResAuto'
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.google.android.material:material:1.10.0'
    implementation 'androidx.recyclerview:recyclerview:1.3.2'
    implementation 'androidx.security:security-crypto:1.1.0-alpha06'
    
    // JSON处理
    implementation 'com.google.code.gson:gson:2.10.1'
    
    // 网络请求
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    
    // 测试依赖
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}
