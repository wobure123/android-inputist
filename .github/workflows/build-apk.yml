name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发

permissions:
  contents: write  # 需要写入权限来创建 release
  packages: write  # 如果需要发布包
  pull-requests: write  # 如果需要操作 PR

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: 8.2
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Build Debug APK
      run: ./gradlew assembleDebug
      
    - name: Build Release APK
      run: ./gradlew assembleRelease
      
    - name: Upload Debug APK
      uses: actions/upload-artifact@v4
      with:
        name: debug-apk
        path: app/build/outputs/apk/debug/app-debug.apk
        
    - name: Upload Release APK
      uses: actions/upload-artifact@v4
      with:
        name: release-apk
        path: app/build/outputs/apk/release/app-release.apk
        
    - name: Read version and update document
      id: get_version
      run: |
        # 提取基础版本号，只从defaultConfig块中获取，避免获取到suffix
        VERSION_NAME=$(grep -A 10 "defaultConfig" app/build.gradle | grep "versionName" | sed 's/.*"\([^"]*\)".*/\1/')
        echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
        echo "Version: $VERSION_NAME"
        
        # 检查版本文档是否存在
        VERSION_DOC="VERSION_UPDATE_v${VERSION_NAME}.md"
        if [ -f "$VERSION_DOC" ]; then
          echo "Found version document: $VERSION_DOC"
          # 读取文档内容，保持原始格式
          {
            echo 'version_content<<EOF'
            cat "$VERSION_DOC"
            echo EOF
          } >> $GITHUB_OUTPUT
          echo "has_version_doc=true" >> $GITHUB_OUTPUT
        else
          echo "Version document not found: $VERSION_DOC"
          echo "has_version_doc=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Create Release (with version document)
      if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && steps.get_version.outputs.has_version_doc == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.get_version.outputs.version_name }}
        name: Release v${{ steps.get_version.outputs.version_name }}
        body: ${{ steps.get_version.outputs.version_content }}
        files: |
          app/build/outputs/apk/debug/app-debug.apk
          app/build/outputs/apk/release/app-release.apk
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create Release (fallback template)
      if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && steps.get_version.outputs.has_version_doc == 'false'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.get_version.outputs.version_name }}
        name: Release v${{ steps.get_version.outputs.version_name }}
        body: |
          🚀 Inputist v${{ steps.get_version.outputs.version_name }} - 智能输入法助手
          
          ## ✨ 新功能
          - 🔄 双模式文本处理（拼接/替换模式）
          - 🎛️ 主界面处理模式设置开关
          - 🎮 快捷操作栏（删除、空格、换行、切换）
          - 🔄 一键输入法切换器
          - 📱 优化的用户界面和体验
          
          ## 🐛 修复内容
          - 🐛 修复编译错误和构建问题
          - 🔧 优化CI/CD签名配置
          - 📝 完善文档和使用说明
          
          ## 📱 下载说明
          - **app-debug.apk**: 调试版本，包含调试信息
          - **app-release.apk**: 发布版本，代码优化和资源压缩
          
          ## 🔧 安装方法
          1. 下载APK文件到手机
          2. 在手机设置中允许安装未知来源应用
          3. 点击APK文件安装
          
          ## 💡 使用方法
          1. 配置API设置（OpenAI兼容）
          2. 选择文本处理模式（拼接/替换）
          3. 创建自定义动作（翻译、润色等）
          4. 在任意应用中切换到Inputist输入法
          5. 使用快捷操作栏或动作按钮处理文本
        files: |
          app/build/outputs/apk/debug/app-debug.apk
          app/build/outputs/apk/release/app-release.apk
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # 如果上面不工作，可以使用 Personal Access Token:
        # GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
